#!/usr/bin/env bash

if [[ $WORK_DIR == '' ]]; then
  REALPATH=$(realpath $0)
  WORK_DIR=$(cd $(dirname $REALPATH) && pwd)
fi
echo "Upgrade srs-terraform at $WORK_DIR from $0"

if [[ $TARGET_VERSION == '' ]]; then
  TARGET_VERSION=$1
fi
TAG_NAME=$(echo $TARGET_VERSION|grep '^v')
echo "The TARGET_VERSION=$TARGET_VERSION TAG_NAME=$TAG_NAME"

if [[ $TARGET_VERSION != 'lighthouse' && $TAG_NAME == '' ]]; then
  echo "Usage: $0 <branch|tag>"
  echo "    branch|tag    The branch or tag to upgrade to."
  echo "For example:"
  echo "    $0 lighthouse"
  echo "    $0 v1.2.3"
  echo "Remark:"
  echo "    You will lost local changes by git checkout"
  exit 1
fi

cd $WORK_DIR && git remote -v && git branch -vva
if [[ $? -ne 0 ]]; then echo "Prepare upgrade failed"; exit 1; fi

# Cache the node container before restart.
# TODO: FIXME: REMOVE-NEXT-RELEASE: Cache by the lighthouse image itself.
docker pull registry.cn-hangzhou.aliyuncs.com/ossrs/node:slim
if [[ $? -ne 0 ]]; then echo "Cache the node container before restart failed"; exit 1; fi

if [[ ! -d /usr/local/srs-terraform && $(uname -s) == 'Darwin' ]]; then
  echo "Directly finish upgrade for macOS development"
  sleep 3; exit 0;
fi

# Try git stash first, ignore any error.
git stash 2>>upgrade.error.log
if [[ $? -ne 0 ]]; then
  echo "Warning: git stash failed, see upgrade.error.log for detail\n";
fi

echo "Reset code files"
git checkout . && git fetch --all
if [[ $? -ne 0 ]]; then echo "Reset code files failed"; exit 1; fi

echo "Create target branch"
CURRENT_BRANCH=$(git branch |grep '*' |awk '{print $2}')
if [[ $CURRENT_BRANCH != $TARGET_VERSION ]]; then
  EXISTS_BRANCH=$(git branch --list $TARGET_VERSION |awk '{print $1}')
  if [[ $EXISTS_BRANCH == $TARGET_VERSION ]]; then
    echo "Checkout to $TARGET_VERSION for current is $CURRENT_BRANCH"
    git checkout $TARGET_VERSION
  else
    echo "Checkout new $TARGET_VERSION for current is $CURRENT_BRANCH"
    git checkout -b $TARGET_VERSION $TARGET_VERSION
  fi
else
  echo "Already on branch $TARGET_VERSION"
fi
if [[ $? -ne 0 ]]; then echo "Create branch $TARGET_VERSION codes failed"; exit 1; fi

echo "Update branch $TARGET_VERSION"
if [[ $(git tag -l $TARGET_VERSION) == '' ]]; then
  echo "Pull for branch $TARGET_VERSION"
  git pull
fi
if [[ $? -ne 0 ]]; then echo "Upgrade codes failed"; exit 1; fi

echo "Make and upgrade updates"
(cd .. && make upgrade)
if [[ $? -ne 0 ]]; then echo "Make and install updates failed"; exit 1; fi

echo "Switch to new version"
(cd ui && TMP_BUILD="build-$(date +%s)" && mv build $TMP_BUILD && mv upgrade build && rm -rf $TMP_BUILD)
if [[ $? -ne 0 ]]; then echo "Switch to new version failed"; exit 1; fi

# Change permissions before restart.
if [[ $(id -un lighthouse 2>/dev/null) == 'lighthouse' ]]; then
  echo "Change permissions for generated files"
  sudo chown -R lighthouse:lighthouse /usr/local/lighthouse/softwares &&
  sudo chown -R lighthouse:lighthouse /usr/local/srs-terraform
  if [[ $? -ne 0 ]]; then echo "Change owner failed"; exit 1; fi
fi

# Setup the UDP kernel options before restart
# See https://www.jianshu.com/p/6d4a89359352
# TODO: FIXME: REMOVE-NEXT-RELEASE: Setup the kernel options by the image itself.
if [[ $(uname -s) != 'Darwin' ]]; then
    sudo sysctl net.core.rmem_max=16777216 &&
    sudo sysctl net.core.rmem_default=16777216 &&
    sudo sysctl net.core.wmem_max=16777216 &&
    sudo sysctl net.core.wmem_default=16777216
  if [[ $? -ne 0 ]]; then echo "Setup the UDP kernel options failed"; exit 1; fi
fi

echo "Restart service"
sudo systemctl daemon-reload && sudo systemctl restart srs-terraform
if [[ $? -ne 0 ]]; then echo "Restart service failed"; exit 1; fi

echo "Upgrade OK"
